# NOTE:
# - properties equal to 'secret' will be replaced by the bin/generate-secrets script.
# - properties equal to 'change_me' are externally provided secrets that should be replaced manually.

# --------------------------------------------------------- 00-init.yaml ---------------------------------------------------------
mongodb:
  auth:
    replicaSetKey: secret
    rootPassword: secret
    passwords:
      - secret

graylog:
    graylog:
        rootPassword: secret

kube_prometheus_stack:
    kube-prometheus-stack:
        alertmanager:
            config:
                receivers:
                -   name: default
                    slack_configs:
                    -   api_url: https://hooks.slack.com/services/XXX/XXX/XXX
                        channel: '#radar-base-alerts'
                        pretext: '{{ .CommonAnnotations.summary }}'
                        username: Radar Base
                        color: '{{ if eq .Status "firing" }}danger{{ else }}good{{
                            end }}'
                        title: '{{ template "slack.default.title" . }}'
                        title_link: '{{ template "slack.default.titlelink" . }}'
                        fallback: '{{ template "slack.default.fallback" . }}'
                        text: "{{ range .Alerts }}\n   *Alert details:* \n  {{ range
                            .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`\n
                            \ {{ end }}\n{{ end }}"
        grafana:
            adminPassword: secret
    # Password for thehyve user at prometheus.<server_name> and alertmanager.<server_name>
    # Generate it manually with: echo "password" | htpasswd -i -n thehyve
    # Or automatically via `bin/generate-secrets` script
    nginx_auth: thehyve:$apr1$5HSenBgF$9VKLQchT85Nrt5I3Vd6H3. # username: thehyve, password: password

# --------------------------------------------------------- 10-base.yaml ---------------------------------------------------------
confluent_cloud:
  cc:
    bootstrapServerurl: change_me
    schemaRegistryUrl: change_me
    apiKey: change_me
    apiSecret: change_me
    schemaRegistryApiKey: change_me
    schemaRegistryApiSecret: change_me

# --------------------------------------------------------- 10-managementportal.yaml ---------------------------------------------------------
postgresql:
  global:
    postgresql:
      auth:
        postgresPassword: secret
  auth:
    replicationPassword: secret

management_portal:
  postgres:
    password: secret
  managementportal:
    common_admin_password: secret
    frontend_client_secret: secret
  oauth_clients:
    pRMT:
      enable: true
      client_secret: "saturday$SHARE$scale"  # default, preferably keep it this way
    aRMT:
      enable: true
      client_secret: ""
    radar_upload_backend:
      client_secret: secret
    radar_upload_connect:
      client_secret: secret
    radar_rest_sources_auth_backend:
      client_secret: secret
    radar_redcap_integrator:
      client_secret: secret
    radar_fitbit_connector:
      client_secret: secret
    radar_appconfig:
      client_secret: secret
    radar_push_endpoint:
      client_secret: secret
    radar_data_dashboard_backend:
      client_secret: secret
  smtp:
    username: change_me
    password: change_me

app_config:
  jdbc:
    password: secret

# --------------------------------------------------------- 20-appserver.yaml ---------------------------------------------------------
# The charts in 20-appserver.yaml only need to be installed if you have a custom aRMT app.
radar_appserver_postgresql:
  global:
    postgresql:
      auth:
        postgresPassword: secret
  auth:
    replicationPassword: secret

radar_appserver:
  postgres:
    password: secret
  smtp:
    username: change_me
    password: change_me

# --------------------------------------------------------- 20-fitbit.yaml ---------------------------------------------------------
# The charts in 20-fitbit.yaml only need to be installed if you will use a Fitbit or Garmin API integration.
# Get a Fitbit API client by registering a server application
# at https://dev.fitbit.com/manage/
fitbit_api_client: change_me
fitbit_api_secret: change_me

oura_api_client: change_me
oura_api_secret: change_me

radar_rest_sources_backend:
  postgres:
    password: secret
# --------------------------------------------------------- 20-dashboard.yaml ---------------------------------------------------------
grafana_password: secret
data_dashboard_db_password: secret
grafana_metrics_db_password: secret
realtime_dashboard_db_password: secret
# --------------------------------------------------------- 20-redcap.yaml ---------------------------------------------------------
radar_integration:
  projects: []
  # Example:
  #projects:
  #  - redcap_info:
  #      url: "http://example.com/"
  #      project_id: "1"
  #      enrolment_event: enrolment
  #      integration_form: radar_integration
  #      token: xxx
  #    mp_info:
  #      project_name: RADAR-BASE

# --------------------------------------------------------- 20-s3-connector.yaml ---------------------------------------------------------
# The access keys and secret keys of object storage services should match.
# If AWS S3 is used as a storage medium instead of minio, then enter the AWS-provided secrets here.
# For minio the secrets must consist of at least 8 characters.
s3_access_key: secret-secret
s3_secret_key: secret-secret

# --------------------------------------------------------- 20-upload.yaml ---------------------------------------------------------
radar_upload_postgres_password: secret

# --------------------------------------------------------- 20-push-endpoint.yaml ---------------------------------------------------------
# Get a Garmin Connect client by registering at
# https://developer.garmin.com/gc-developer-program/overview/
radar_push_endpoint:
  garmin:
    consumerKey: change_me
    consumerSecret: change_me

# --------------------------------------------------------- 99-velero.yaml ---------------------------------------------------------

velero:
  backup:
    accessKey: change_me
    secretKey: change_me
  velero:
    credentials:
      secretContents:
        cloud: |
          [default]
          aws_access_key_id=change_me
          aws_secret_access_key=change_me
