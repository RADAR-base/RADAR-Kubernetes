## @section Global parameters
## Please, note that this will override the parameters, including dependencies, configured to use the global value
##
global:
  postgresql:
    ## @param global.postgresql.auth.postgresPassword Password for the "postgres" admin user (overrides `auth.postgresPassword`)
    ## @param global.postgresql.auth.username Name for a custom user to create (overrides `auth.username`)
    ## @param global.postgresql.auth.password Password for the custom user to create (overrides `auth.password`)
    ## @param global.postgresql.auth.database Name for a custom database to create (overrides `auth.database`)
    ## @param global.postgresql.auth.existingSecret Name of existing secret to use for PostgreSQL credentials (overrides `auth.existingSecret`)
    ##
    auth:
      postgresPassword: ""

## Bitnami PostgreSQL image version
## ref: https://hub.docker.com/r/bitnami/postgresql/tags/
## @param image.registry PostgreSQL image registry
## @param image.repository PostgreSQL image repository
## @param image.tag PostgreSQL image tag (immutable tags are recommended)
## @param image.pullPolicy PostgreSQL image pull policy
## @param image.pullSecrets Specify image pull secrets
## @param image.debug Specify if debug values should be set
##
image:
  registry: docker.io
  repository: timescale/timescaledb
  tag: latest-pg12-bitnami
## Authentication parameters
## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#setting-the-root-password-on-first-run
## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#creating-a-database-on-first-run
## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#creating-a-database-user-on-first-run
##
auth:
  ## @param auth.enablePostgresUser Assign a password to the "postgres" admin user. Otherwise, remote access will be blocked for this user
  ##
  enablePostgresUser: true
  ## @param auth.postgresPassword Password for the "postgres" admin user. Ignored if `auth.existingSecret` with key `postgres-password` is provided
  ##
  postgresPassword: ""
  ## @param auth.database Name for a custom database to create
  ##
  database: grafana-metrics
## @param architecture PostgreSQL architecture (`standalone` or `replication`)
##
architecture: standalone
## Replication configuration
## Ignored if `architecture` is `standalone`
##
replication:
  ## @param replication.applicationName Cluster application name. Useful for advanced replication settings
  ##
  applicationName: grafana
## @param postgresqlDataDir PostgreSQL data dir folder
##
postgresqlDataDir: /bitnami/postgresql/data
## @param postgresqlSharedPreloadLibraries Shared preload libraries (comma-separated list)
##
postgresqlSharedPreloadLibraries: "pgaudit,timescaledb"

## @section PostgreSQL Primary parameters
##
primary:
  ## @param primary.extraEnvVars Array with extra environment variables to add to PostgreSQL Primary nodes
  ## e.g:
  ## extraEnvVars:
  ##   - name: FOO
  ##     value: "bar"
  ##
  initdb:
    ## @param primary.initdb.scripts Dictionary of initdb scripts
    ## Specify dictionary of scripts to be run at first boot
    ## e.g:
    ## scripts:
    ##   my_init_script.sh: |
    ##      #!/bin/sh
    ##      echo "Do something."
    ##
    scripts:
      multi-db-init.sh: |
        #!/bin/bash
        set -e
        set -u
        export PGPASSWORD="$POSTGRESQL_PASSWORD"
        
        function create_user_and_database() {
          export PGPASSWORD="$POSTGRESQL_PASSWORD"
          local database=$1
          local database_exist=$(psql -U postgres -tAc "SELECT 1 FROM pg_database WHERE datname='$database';")
          if [[ "$database_exist" == 1 ]]; then
            echo "Database $database already exists"
          else
            echo "Database $database does not exist"
            echo "  Creating database '$database' for user postgres"
            psql -U postgres -v ON_ERROR_STOP=1  <<-EOSQL
            CREATE DATABASE "$database";
            GRANT ALL PRIVILEGES ON DATABASE $database TO postgres;
        EOSQL
          fi
        }
        
        if [ -n "$POSTGRES_MULTIPLE_DATABASES" ]; then
          echo "Multiple database creation requested: $POSTGRES_MULTIPLE_DATABASES"
          #waiting for postgres
          for db in $(echo $POSTGRES_MULTIPLE_DATABASES | tr ',' ' '); do
            create_user_and_database $db
          done
          echo "Databases created"
        fi
  ## @param primary.extraEnvVars Array with extra environment variables to add to PostgreSQL Primary nodes
  ## e.g:
  ## extraEnvVars:
  ##   - name: FOO
  ##     value: "bar"
  ##
  extraEnvVars:
    - name: POSTGRESQL_USERNAME
      value: postgres
    - name: POSTGRES_USER
      value: postgres
    - name: POSTGRES_MULTIPLE_DATABASES
      value: grafana,data-dashboard
  ## @param primary.podAnnotations Map of annotations to add to the pods (postgresql primary)
  ##
  podAnnotations:
    backup.velero.io/backup-volumes: data
    post.hook.backup.velero.io/command: '["/bin/fsfreeze", "--unfreeze", "/bitnami/postgresql"]'
    post.hook.backup.velero.io/container: fsfreeze
    pre.hook.backup.velero.io/command: '["/bin/fsfreeze", "--freeze", "/bitnami/postgresql"]'
    pre.hook.backup.velero.io/container: fsfreeze
  ## @param primary.sidecars Add additional sidecar containers to the PostgreSQL Primary pod(s)
  ## For example:
  ## sidecars:
  ##   - name: your-image-name
  ##     image: your-image
  ##     imagePullPolicy: Always
  ##     ports:
  ##       - name: portname
  ##         containerPort: 1234
  ##
  sidecars:
  - name: fsfreeze
    image: busybox
    securityContext:
      privileged: true
    volumeMounts:
      - mountPath: "/bitnami/postgresql"
        name: data
        readOnly: false
    command:
      - "/bin/sh"
      - "-c"
      - "sleep infinity"
  ## PostgreSQL Primary persistence configuration
  ##
  persistence:
    ## @param primary.persistence.enabled Enable PostgreSQL Primary data persistence using PVC
    ##
    enabled: true
    ## @param primary.persistence.existingClaim Name of an existing PVC to use
    ##
    #existingClaim: "data-timescaledb-postgresql-0"
    ## @param primary.persistence.mountPath The path the volume will be mounted at
    ## Note: useful when using custom PostgreSQL images
    ##
    mountPath: /bitnami/postgresql
    ## @param primary.persistence.size PVC Storage Request for PostgreSQL volume
    ##
    size: 8Gi
## @section Metrics Parameters

metrics:
  ## @param metrics.enabled Start a prometheus exporter
  ##
  enabled: true
## volumePermissions: Change the owner and group of the persistent volume(s) mountpoint(s) to 'runAsUser:fsGroup' on each node
##
volumePermissions:
  ## @param volumePermissions.enabled Enable init container that changes the owner and group of the persistent volume
  ##
  enabled: true
