#!/usr/bin/env bash

cd "$(dirname "${BASH_SOURCE[0]}")/.."
. bin/util.sh

if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
  echo "Usage: $0 [-h|--help]"
  echo "Generate secrets inside the etc/secrets.yaml file. Existing secrets are overwritten."
  exit
fi

if [ -f etc/secrets.yaml ]; then
  echo "WARN: etc/secrets.yaml file already exists. The existing secrets can be reset."
  echo "Note: for already initialized systems like redis and PostgreSQL changing the secret will not affect the actual password."
  read -p "Do you wish to reset all passwords? [y/N] " yn
  case $yn in
    [Yy]* ) ;;
    * ) exit;;
  esac
  echo "=> Copying current file to etc/secrets.backup.yaml"
  cp -p etc/secrets.yaml etc/secrets.backup.yaml
  echo
fi

echo "=> Checking tools"
check_command_exists yq
check_command_exists openssl version

echo "=> Generating passwords"
if [ ! -f etc/secrets.yaml ]; then
  copy_template etc/secrets.yaml etc/base-secrets.yaml
fi

insert_secret() {
  localSecret="${secret:-$(generate_secret)}"
  # For any group of yaml paths passed add the same (!) password.
  for key in "$@"; do
    localSecret="$localSecret" yq -i "$key = strenv(localSecret)" etc/secrets.yaml
  done
  # Do not remove this 'secret=' line! It ensures that subsequent replacements get a unique password.
  secret=
}

# -- Groups of shared passwords

# Management portal postgres database
insert_secret \
  ".postgresql.global.postgresql.auth.postgresPassword" \
  ".postgresql.auth.replicationPassword" \
  ".management_portal.postgres.password" \
  ".app_config.jdbc.password" \
  ".radar_rest_sources_backend.postgres.password"

# Appserver postgres database
insert_secret \
  ".radar_appserver_postgresql.global.postgresql.auth.postgresPassword" \
  ".radar_appserver_postgresql.auth.replicationPassword" \
  ".radar_appserver.postgres.password"

# --

# The NGINX password for prometheus follows a pattern different from others.
nginx_auth_password=$(generate_secret)
secret="thehyve:$(echo $nginx_auth_password | openssl passwd -apr1 -stdin)" insert_secret ".kube_prometheus_stack.nginx_auth"
comment="username: thehyve, password: $nginx_auth_password" yq -i ".kube_prometheus_stack.nginx_auth line_comment |= strenv(comment)" etc/secrets.yaml

# Generate secrets for all remaining fields with value 'secret' or 'secret-secret' (if the component has a min length requirement).
replacements=$(yq e '.. | select(. == "secret" or . == "secret-secret") | [(path | "."+join("."))] | join(" ")' etc/secrets.yaml);
for key in $replacements; do
  insert_secret $key
done