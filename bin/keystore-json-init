#!/usr/bin/env bash

# This script generates a JSON Web Key Set (JWKS) file for use with Ory Kratos.
# It creates a jwks.json file containing an EC key and an RSA key.

cd "$(dirname "${BASH_SOURCE[0]}")" || exit 1

# --- Help Section ---
if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
  echo "Usage: $0 [-h|--help]"
  echo "Create a jwks.json file with signing keys for Ory Kratos."
  echo
  echo "This script uses 'step-cli' and 'jq' to generate the keys."
  echo "Ensure both tools are installed before running."
  echo
  echo "Installation instructions:"
  echo "  - step-cli: https://smallstep.com/docs/step-cli/installation"
  echo "  - jq: https://stedolan.github.io/jq/download/"
  exit 0
fi

# --- Dependency Check ---
function check_command_exists() {
  if ! command -v "$1" &> /dev/null; then
    echo "Error: Required command '$1' is not installed." >&2
    echo "Please install it and try again." >&2
    exit 1
  fi
}

check_command_exists step
check_command_exists jq

# --- Main JWKS Creation Function ---
function createJwksFile() {
  local jwksfile="$1"
  local temp_jwksfile
  temp_jwksfile=$(mktemp)

  # Ensure a base JWKS structure exists
  if [ ! -f "${jwksfile}" ]; then
    echo '{"keys":[]}' > "${jwksfile}"
    echo "--> Created empty JWKS file at ${jwksfile}"
  fi
  cp "${jwksfile}" "${temp_jwksfile}"

  # --- Key Definitions ---
  # Define the keys we want in our JWKS file.
  # Format: "kid|key_type|key_options"
  local keys_to_ensure=(
    "radarbase-managementportal-ec|EC|--crv P-256"
    "selfsigned|RSA|--size 4096"
  )

  local key_added=false

  for key_def in "${keys_to_ensure[@]}"; do
    # Parse the key definition string
    IFS='|' read -r kid kty options <<< "${key_def}"

    # Check if a key with this 'kid' already exists in the JWKS file
    if jq -e --arg kid "${kid}" '.keys[] | select(.kid == $kid)' "${temp_jwksfile}" >/dev/null; then
      echo "--> Key with kid '${kid}' already exists. Skipping generation."
    else
      echo "--> Generating ${kty} key with kid '${kid}'..."

      # Generate the new key as a JSON object
      # The '--no-password --insecure' flags are for non-interactive generation.
      local new_key
      new_key=$(step crypto jwk create /dev/null /dev/stdout --kty "${kty}" ${options} --kid "${kid}" --use sig --no-password --insecure)

      # Add the new key to our temporary JWKS file
      jq --argjson key "${new_key}" '.keys += [$key]' "${temp_jwksfile}" > "${temp_jwksfile}.tmp" && mv "${temp_jwksfile}.tmp" "${temp_jwksfile}"

      key_added=true
      echo "    Done."
    fi
  done

  if [ "$key_added" = true ]; then
    mv "${temp_jwksfile}" "${jwksfile}"
    echo
    echo "âœ… Successfully updated ${jwksfile}"
  else
    rm "${temp_jwksfile}"
    echo "âœ… JWKS file is already up to date."
  fi

  chmod 600 "${jwksfile}"
  echo "--> Set file permissions for ${jwksfile} to 600."
}

# --- Execution ---
echo "Starting JWKS generation for Ory Kratos..."

KRATOS_CONFIG_DIR="../etc/radar-kratos"
KRATOS_JWKS_FILE="${KRATOS_CONFIG_DIR}/jwks.json"

mkdir -p "${KRATOS_CONFIG_DIR}"

createJwksFile "${KRATOS_JWKS_FILE}"

# The public key from generated JWKS needs to be passed to all the apps that verify the token
echo "Extracting public keys from generated JWKS to use for token verification in other apps..."
MANAGEMENT_PORTAL_DIR="../etc/management-portal"
jq '.keys |= map(del(.d, .p, .q, .dp, .dq, .qi))' "${KRATOS_JWKS_FILE}" > "${MANAGEMENT_PORTAL_DIR}/public-jwks.json"
echo "âœ… JWKS public key added to ${MANAGEMENT_PORTAL_DIR} directory."

echo "ðŸš€ All done. Your ${KRATOS_JWKS_FILE} is ready for Ory Kratos."